{
	"type": "meshBasicBuilder",
	"nodes": {
		"globals1": {
			"type": "globals"
		},
		"instanceTransform1": {
			"type": "instanceTransform",
			"params": {
				"position": {
					"overriden_options": {
						"editable": "true"
					}
				},
				"normal": {
					"overriden_options": {
						"editable": "true"
					}
				},
				"instancePosition": {
					"overriden_options": {
						"editable": "true"
					}
				},
				"instanceOrientation": {
					"overriden_options": {
						"editable": "false"
					}
				},
				"instanceScale": {
					"overriden_options": {
						"editable": "false"
					}
				}
			},
			"inputs": [
				null,
				null,
				null,
				{
					"index": 3,
					"node": "twoWaySwitch1",
					"output": "val"
				},
				{
					"index": 4,
					"node": "floatToVec3_2",
					"output": "vec3"
				}
			]
		},
		"output1": {
			"type": "output",
			"inputs": [
				{
					"index": 0,
					"node": "instanceTransform1",
					"output": "position"
				},
				{
					"index": 1,
					"node": "instanceTransform1",
					"output": "normal"
				},
				{
					"index": 2,
					"node": "mix1",
					"output": "mix"
				}
			]
		},
		"attribute1": {
			"type": "attribute",
			"params": {
				"name": "pti"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"random1": {
			"type": "random",
			"params": {
				"seed": {
					"overriden_options": {
						"editable": "false"
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "floatToVec2_1",
					"output": "vec2"
				}
			]
		},
		"floatToVec2_1": {
			"type": "floatToVec2",
			"params": {
				"x": {
					"overriden_options": {
						"editable": "false"
					}
				},
				"y": {
					"overriden_options": {
						"editable": "true"
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute1",
					"output": "val"
				}
			]
		},
		"hsvToRgb1": {
			"type": "hsvToRgb",
			"params": {
				"hsv": {
					"overriden_options": {
						"editable": "false"
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "floatToVec3_1",
					"output": "vec3"
				}
			]
		},
		"floatToVec3_1": {
			"type": "floatToVec3",
			"params": {
				"x": {
					"overriden_options": {
						"editable": "false"
					}
				},
				"y": {
					"raw_input": 1,
					"overriden_options": {
						"editable": "true"
					}
				},
				"z": {
					"raw_input": 1,
					"overriden_options": {
						"editable": "true"
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "random1",
					"output": "rand"
				}
			]
		},
		"varyingWrite1": {
			"type": "varyingWrite",
			"params": {
				"name": "varyingWriteColor",
				"type": 2,
				"vertex": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "hsvToRgb1",
					"output": "rgb"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "vertex",
						"type": "vec3"
					}
				],
				"out": []
			}
		},
		"varyingRead1": {
			"type": "varyingRead",
			"params": {
				"name": "varyingWriteColor",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "fragment",
						"type": "vec3"
					}
				]
			}
		},
		"attribute2": {
			"type": "attribute",
			"params": {
				"name": "velocity",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"constant1": {
			"type": "constant",
			"params": {
				"type": 4,
				"color": [
					1,
					1,
					1
				],
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"length1": {
			"type": "length",
			"params": {
				"x": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "x",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"fit1": {
			"type": "fit",
			"params": {
				"val": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"srcMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.16
				},
				"srcMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.27
				},
				"destMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					}
				},
				"destMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "length1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "val",
						"type": "float"
					},
					{
						"name": "srcMin",
						"type": "float"
					},
					{
						"name": "srcMax",
						"type": "float"
					},
					{
						"name": "destMin",
						"type": "float"
					},
					{
						"name": "destMax",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mix1": {
			"type": "mix",
			"params": {
				"value0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"value1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"blend": {
					"type": "float",
					"default_value": 0.5,
					"options": {
						"spare": true,
						"editable": false
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "constant1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "varyingRead1",
					"output": "fragment"
				},
				{
					"index": 2,
					"node": "smoothstep1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "vec3"
					},
					{
						"name": "value1",
						"type": "vec3"
					},
					{
						"name": "blend",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "mix",
						"type": "vec3"
					}
				]
			}
		},
		"attribute3": {
			"type": "attribute",
			"params": {
				"name": "velocity",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"constant2": {
			"type": "constant",
			"params": {
				"type": 4,
				"vec3": [
					1,
					1,
					2.5
				]
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"length2": {
			"type": "length",
			"params": {
				"x": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "maxLength1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "x",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd1": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.64
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "length2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"floatToVec3_2": {
			"type": "floatToVec3",
			"params": {
				"x": {
					"raw_input": 1,
					"overriden_options": {
						"editable": "true"
					}
				},
				"y": {
					"raw_input": 1,
					"overriden_options": {
						"editable": "true"
					}
				},
				"z": {
					"overriden_options": {
						"editable": "false"
					}
				}
			},
			"inputs": [
				null,
				null,
				{
					"index": 2,
					"node": "multAdd1",
					"output": "val"
				}
			]
		},
		"align1": {
			"type": "align",
			"params": {
				"dir": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						1
					],
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"up": {
					"type": "vector3",
					"default_value": [
						0,
						1,
						0
					],
					"options": {
						"spare": true,
						"editable": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "normalize1",
					"output": "normalized"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "dir",
						"type": "vec3"
					},
					{
						"name": "up",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec4"
					}
				]
			}
		},
		"smoothstep1": {
			"type": "smoothstep",
			"params": {
				"edge0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					}
				},
				"edge1": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.4
				},
				"x": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				null,
				null,
				{
					"index": 2,
					"node": "length1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "edge0",
						"type": "float"
					},
					{
						"name": "edge1",
						"type": "float"
					},
					{
						"name": "x",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"maxLength1": {
			"type": "maxLength",
			"params": {
				"val": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 4
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "val",
						"type": "vec3"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"compare1": {
			"type": "compare",
			"params": {
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.01
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "length3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"constant3": {
			"type": "constant",
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"normalize1": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "ifThen1",
					"output": "v"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"length3": {
			"type": "length",
			"params": {
				"x": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "x",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant4": {
			"type": "constant",
			"params": {
				"type": 4,
				"vec3": [
					1,
					1,
					5
				]
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"isInfOrNan1": {
			"type": "isInfOrNan",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"maxInputsCount": 1,
			"inputs": [
				{
					"index": 0,
					"node": "attribute3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "out",
						"type": "bool"
					}
				]
			}
		},
		"or1": {
			"type": "or",
			"params": {
				"or0": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"or1": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "isInfOrNan1",
					"output": "out"
				},
				{
					"index": 1,
					"node": "compare1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "or0",
						"type": "bool"
					},
					{
						"name": "or1",
						"type": "bool"
					}
				],
				"out": [
					{
						"name": "or",
						"type": "bool"
					}
				]
			}
		},
		"twoWaySwitch1": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"ifTrue": {
					"type": "vector4",
					"default_value": [
						0,
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"ifFalse": {
					"type": "vector4",
					"default_value": [
						0,
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "or1",
					"output": "or"
				},
				{
					"index": 1,
					"node": "attribute4",
					"output": "val"
				},
				{
					"index": 2,
					"node": "align1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "vec4"
					},
					{
						"name": "ifFalse",
						"type": "vec4"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec4"
					}
				]
			}
		},
		"attribute4": {
			"type": "attribute",
			"params": {
				"name": "instanceOrientation",
				"type": 3
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec4"
					}
				]
			}
		}
	},
	"persisted_config": {
		"material": {
			"metadata": {
				"version": 4.5,
				"type": "Material",
				"generator": "Material.toJSON"
			},
			"uuid": "/particles/MAT/meshBasicBuilder_PARTICLES-main",
			"type": "MeshBasicMaterial",
			"name": "/particles/MAT/meshBasicBuilder_PARTICLES",
			"color": 16777215,
			"reflectivity": 1,
			"refractionRatio": 0.98,
			"depthFunc": 3,
			"depthTest": true,
			"depthWrite": true,
			"colorWrite": true,
			"stencilWrite": false,
			"stencilWriteMask": 255,
			"stencilFunc": 519,
			"stencilRef": 0,
			"stencilFuncMask": 255,
			"stencilFail": 7680,
			"stencilZFail": 7680,
			"stencilZPass": 7680,
			"shadowSide": null
		},
		"onBeforeCompileDataJSON": {
			"vertexShader": "\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n#define isInf(x) ( (x) == (x)+1. )\n#define isNaN(x) ( (x) != (x)    )\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n//\n//\n// CLAMP_LENGTH\n//\n//\nfloat maxLength(float val, float max_l){\n\treturn min(val, max_l);\n}\nvec2 maxLength(vec2 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec3 maxLength(vec3 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec4 maxLength(vec4 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n// https://github.com/hughsk/glsl-hsv2rgb\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no ideal rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\nvarying vec3 varyingWriteColor;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nattribute vec2 particles_sim_uv_attrib;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\nattribute vec4 instanceOrientation;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\nattribute float pti;\n\n\n\n\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_attribute3_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\n\tvec4 v_POLY_attribute4_val = instanceOrientation;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n\tbool v_POLY_isInfOrNan1_out = isInf(v_POLY_attribute3_val.x) || isNaN(v_POLY_attribute3_val.x) || isInf(v_POLY_attribute3_val.y) || isNaN(v_POLY_attribute3_val.y) || isInf(v_POLY_attribute3_val.z) || isNaN(v_POLY_attribute3_val.z);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length3\n\tfloat v_POLY_length3_val = length(v_POLY_attribute3_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n\tvec3 v_POLY_maxLength1_val = maxLength(v_POLY_attribute3_val, 4.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/compare1\n\tbool v_POLY_compare1_val = (v_POLY_length3_val < 0.01);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length2\n\tfloat v_POLY_length2_val = length(v_POLY_maxLength1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/random1\n\tfloat v_POLY_random1_rand = rand(v_POLY_floatToVec2_1_vec2);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/or1\n\tbool v_POLY_or1_or = v_POLY_isInfOrNan1_out || v_POLY_compare1_val;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/multAdd1\n\tfloat v_POLY_multAdd1_val = (0.64*(v_POLY_length2_val + 0.0)) + 1.0;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_random1_rand, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1\n\tvec3 v_POLY_ifThen1_v = v_POLY_attribute3_val;\n\tif(v_POLY_or1_or){\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\n\t\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\tvec3 v_POLY_ifThen1_attribute4_val = texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\t\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/subnetOutput1\n\t\tv_POLY_ifThen1_v = v_POLY_ifThen1_attribute4_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_2\n\tvec3 v_POLY_floatToVec3_2_vec3 = vec3(1.0, 1.0, v_POLY_multAdd1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n\tvec3 v_POLY_hsvToRgb1_rgb = hsv2rgb(v_POLY_floatToVec3_1_vec3);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_ifThen1_v);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\n\tvaryingWriteColor = v_POLY_hsvToRgb1_rgb;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\tvec4 v_POLY_align1_val = align(v_POLY_normalize1_normalized, vec3(0.0, 1.0, 0.0));\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/twoWaySwitch1\n\tvec4 v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_or1_or){\n\tv_POLY_twoWaySwitch1_val = v_POLY_attribute4_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_align1_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/instanceTransform1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_instanceTransform1_position = vec3(position);\n\tv_POLY_instanceTransform1_position *= v_POLY_floatToVec3_2_vec3;\n\tv_POLY_instanceTransform1_position = rotateWithQuat( v_POLY_instanceTransform1_position, v_POLY_twoWaySwitch1_val );\n\tv_POLY_instanceTransform1_position += texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\tvec3 v_POLY_instanceTransform1_normal = vec3(normal);\n\tv_POLY_instanceTransform1_normal = rotateWithQuat( v_POLY_instanceTransform1_normal, v_POLY_twoWaySwitch1_val );\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tvec3 transformed = v_POLY_instanceTransform1_position;\n\tvec3 objectNormal = v_POLY_instanceTransform1_normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
			"fragmentShader": "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\nvarying vec3 varyingWriteColor;\n\n\n\n\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\n\tvec3 v_POLY_varyingRead1_fragment = varyingWriteColor;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tvec3 v_POLY_attribute2_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length1\n\tfloat v_POLY_length1_val = length(v_POLY_attribute2_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/smoothstep1\n\tfloat v_POLY_smoothstep1_val = smoothstep(0.0, 0.4, v_POLY_length1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/mix1\n\tvec3 v_POLY_mix1_mix = mix(v_POLY_constant1_val, v_POLY_varyingRead1_fragment, v_POLY_smoothstep1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tdiffuseColor.xyz = v_POLY_mix1_mix;\n\n\n\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
			"timeDependent": false,
			"resolutionDependent": false,
			"paramConfigs": []
		},
		"customMaterials": {
			"customDepthMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/particles/MAT/meshBasicBuilder_PARTICLES-customDepthMaterial",
					"type": "MeshDepthMaterial",
					"name": "customDepthMaterial",
					"side": 1,
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"shadowSide": null
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n#define isInf(x) ( (x) == (x)+1. )\n#define isNaN(x) ( (x) != (x)    )\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n//\n//\n// CLAMP_LENGTH\n//\n//\nfloat maxLength(float val, float max_l){\n\treturn min(val, max_l);\n}\nvec2 maxLength(vec2 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec3 maxLength(vec3 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec4 maxLength(vec4 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n// https://github.com/hughsk/glsl-hsv2rgb\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no ideal rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\nvarying vec3 varyingWriteColor;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nattribute vec2 particles_sim_uv_attrib;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\nattribute vec4 instanceOrientation;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\nattribute float pti;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_attribute3_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\n\tvec4 v_POLY_attribute4_val = instanceOrientation;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n\tbool v_POLY_isInfOrNan1_out = isInf(v_POLY_attribute3_val.x) || isNaN(v_POLY_attribute3_val.x) || isInf(v_POLY_attribute3_val.y) || isNaN(v_POLY_attribute3_val.y) || isInf(v_POLY_attribute3_val.z) || isNaN(v_POLY_attribute3_val.z);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length3\n\tfloat v_POLY_length3_val = length(v_POLY_attribute3_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n\tvec3 v_POLY_maxLength1_val = maxLength(v_POLY_attribute3_val, 4.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/compare1\n\tbool v_POLY_compare1_val = (v_POLY_length3_val < 0.01);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length2\n\tfloat v_POLY_length2_val = length(v_POLY_maxLength1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/random1\n\tfloat v_POLY_random1_rand = rand(v_POLY_floatToVec2_1_vec2);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/or1\n\tbool v_POLY_or1_or = v_POLY_isInfOrNan1_out || v_POLY_compare1_val;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/multAdd1\n\tfloat v_POLY_multAdd1_val = (0.64*(v_POLY_length2_val + 0.0)) + 1.0;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_random1_rand, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1\n\tvec3 v_POLY_ifThen1_v = v_POLY_attribute3_val;\n\tif(v_POLY_or1_or){\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\n\t\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\tvec3 v_POLY_ifThen1_attribute4_val = texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\t\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/subnetOutput1\n\t\tv_POLY_ifThen1_v = v_POLY_ifThen1_attribute4_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_2\n\tvec3 v_POLY_floatToVec3_2_vec3 = vec3(1.0, 1.0, v_POLY_multAdd1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n\tvec3 v_POLY_hsvToRgb1_rgb = hsv2rgb(v_POLY_floatToVec3_1_vec3);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_ifThen1_v);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\n\tvaryingWriteColor = v_POLY_hsvToRgb1_rgb;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\tvec4 v_POLY_align1_val = align(v_POLY_normalize1_normalized, vec3(0.0, 1.0, 0.0));\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/twoWaySwitch1\n\tvec4 v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_or1_or){\n\tv_POLY_twoWaySwitch1_val = v_POLY_attribute4_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_align1_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/instanceTransform1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_instanceTransform1_position = vec3(position);\n\tv_POLY_instanceTransform1_position *= v_POLY_floatToVec3_2_vec3;\n\tv_POLY_instanceTransform1_position = rotateWithQuat( v_POLY_instanceTransform1_position, v_POLY_twoWaySwitch1_val );\n\tv_POLY_instanceTransform1_position += texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\tvec3 v_POLY_instanceTransform1_normal = vec3(normal);\n\tv_POLY_instanceTransform1_normal = rotateWithQuat( v_POLY_instanceTransform1_normal, v_POLY_twoWaySwitch1_val );\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tvec3 transformed = v_POLY_instanceTransform1_position;\n\tvec3 objectNormal = v_POLY_instanceTransform1_normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\nvarying vec3 varyingWriteColor;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\n\tvec3 v_POLY_varyingRead1_fragment = varyingWriteColor;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tvec3 v_POLY_attribute2_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length1\n\tfloat v_POLY_length1_val = length(v_POLY_attribute2_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/smoothstep1\n\tfloat v_POLY_smoothstep1_val = smoothstep(0.0, 0.4, v_POLY_length1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/mix1\n\tvec3 v_POLY_mix1_mix = mix(v_POLY_constant1_val, v_POLY_varyingRead1_fragment, v_POLY_smoothstep1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tdiffuseColor.xyz = v_POLY_mix1_mix;\n\n\n\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": []
				}
			},
			"customDistanceMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/particles/MAT/meshBasicBuilder_PARTICLES-customDistanceMaterial",
					"type": "MeshDistanceMaterial",
					"name": "customDistanceMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"shadowSide": null
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n#define isInf(x) ( (x) == (x)+1. )\n#define isNaN(x) ( (x) != (x)    )\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n//\n//\n// CLAMP_LENGTH\n//\n//\nfloat maxLength(float val, float max_l){\n\treturn min(val, max_l);\n}\nvec2 maxLength(vec2 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec3 maxLength(vec3 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec4 maxLength(vec4 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n// https://github.com/hughsk/glsl-hsv2rgb\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no ideal rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\nvarying vec3 varyingWriteColor;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nattribute vec2 particles_sim_uv_attrib;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\nattribute vec4 instanceOrientation;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\nattribute float pti;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_attribute3_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\n\tvec4 v_POLY_attribute4_val = instanceOrientation;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n\tbool v_POLY_isInfOrNan1_out = isInf(v_POLY_attribute3_val.x) || isNaN(v_POLY_attribute3_val.x) || isInf(v_POLY_attribute3_val.y) || isNaN(v_POLY_attribute3_val.y) || isInf(v_POLY_attribute3_val.z) || isNaN(v_POLY_attribute3_val.z);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length3\n\tfloat v_POLY_length3_val = length(v_POLY_attribute3_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n\tvec3 v_POLY_maxLength1_val = maxLength(v_POLY_attribute3_val, 4.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/compare1\n\tbool v_POLY_compare1_val = (v_POLY_length3_val < 0.01);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length2\n\tfloat v_POLY_length2_val = length(v_POLY_maxLength1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/random1\n\tfloat v_POLY_random1_rand = rand(v_POLY_floatToVec2_1_vec2);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/or1\n\tbool v_POLY_or1_or = v_POLY_isInfOrNan1_out || v_POLY_compare1_val;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/multAdd1\n\tfloat v_POLY_multAdd1_val = (0.64*(v_POLY_length2_val + 0.0)) + 1.0;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_random1_rand, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1\n\tvec3 v_POLY_ifThen1_v = v_POLY_attribute3_val;\n\tif(v_POLY_or1_or){\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\n\t\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\tvec3 v_POLY_ifThen1_attribute4_val = texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\t\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/subnetOutput1\n\t\tv_POLY_ifThen1_v = v_POLY_ifThen1_attribute4_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_2\n\tvec3 v_POLY_floatToVec3_2_vec3 = vec3(1.0, 1.0, v_POLY_multAdd1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n\tvec3 v_POLY_hsvToRgb1_rgb = hsv2rgb(v_POLY_floatToVec3_1_vec3);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_ifThen1_v);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\n\tvaryingWriteColor = v_POLY_hsvToRgb1_rgb;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\tvec4 v_POLY_align1_val = align(v_POLY_normalize1_normalized, vec3(0.0, 1.0, 0.0));\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/twoWaySwitch1\n\tvec4 v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_or1_or){\n\tv_POLY_twoWaySwitch1_val = v_POLY_attribute4_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_align1_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/instanceTransform1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_instanceTransform1_position = vec3(position);\n\tv_POLY_instanceTransform1_position *= v_POLY_floatToVec3_2_vec3;\n\tv_POLY_instanceTransform1_position = rotateWithQuat( v_POLY_instanceTransform1_position, v_POLY_twoWaySwitch1_val );\n\tv_POLY_instanceTransform1_position += texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\tvec3 v_POLY_instanceTransform1_normal = vec3(normal);\n\tv_POLY_instanceTransform1_normal = rotateWithQuat( v_POLY_instanceTransform1_normal, v_POLY_twoWaySwitch1_val );\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tvec3 transformed = v_POLY_instanceTransform1_position;\n\tvec3 objectNormal = v_POLY_instanceTransform1_normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\nvarying vec3 varyingWriteColor;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\n\tvec3 v_POLY_varyingRead1_fragment = varyingWriteColor;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tvec3 v_POLY_attribute2_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length1\n\tfloat v_POLY_length1_val = length(v_POLY_attribute2_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/smoothstep1\n\tfloat v_POLY_smoothstep1_val = smoothstep(0.0, 0.4, v_POLY_length1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/mix1\n\tvec3 v_POLY_mix1_mix = mix(v_POLY_constant1_val, v_POLY_varyingRead1_fragment, v_POLY_smoothstep1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tdiffuseColor.xyz = v_POLY_mix1_mix;\n\n\n\n\n\t// INSERT BODY\n\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": []
				}
			},
			"customDepthDOFMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/particles/MAT/meshBasicBuilder_PARTICLES-customDepthDOFMaterial",
					"type": "MeshDepthMaterial",
					"name": "customDepthDOFMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"shadowSide": null
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n#define isInf(x) ( (x) == (x)+1. )\n#define isNaN(x) ( (x) != (x)    )\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n//\n//\n// CLAMP_LENGTH\n//\n//\nfloat maxLength(float val, float max_l){\n\treturn min(val, max_l);\n}\nvec2 maxLength(vec2 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec3 maxLength(vec3 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\nvec4 maxLength(vec4 val, float max_l){\n\tfloat vec_length = length(val);\n\tif(vec_length == 0.0){\n\t\treturn val;\n\t} else {\n\t\tfloat new_length = min(vec_length, max_l);\n\t\treturn new_length * normalize(val);\n\t}\n}\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n// https://github.com/hughsk/glsl-hsv2rgb\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no ideal rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the up of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\nvarying vec3 varyingWriteColor;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nattribute vec2 particles_sim_uv_attrib;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\nattribute vec4 instanceOrientation;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\nattribute float pti;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_attribute3_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute4\n\tvec4 v_POLY_attribute4_val = instanceOrientation;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/isInfOrNan1\n\tbool v_POLY_isInfOrNan1_out = isInf(v_POLY_attribute3_val.x) || isNaN(v_POLY_attribute3_val.x) || isInf(v_POLY_attribute3_val.y) || isNaN(v_POLY_attribute3_val.y) || isInf(v_POLY_attribute3_val.z) || isNaN(v_POLY_attribute3_val.z);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length3\n\tfloat v_POLY_length3_val = length(v_POLY_attribute3_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/maxLength1\n\tvec3 v_POLY_maxLength1_val = maxLength(v_POLY_attribute3_val, 4.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/compare1\n\tbool v_POLY_compare1_val = (v_POLY_length3_val < 0.01);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length2\n\tfloat v_POLY_length2_val = length(v_POLY_maxLength1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/random1\n\tfloat v_POLY_random1_rand = rand(v_POLY_floatToVec2_1_vec2);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/or1\n\tbool v_POLY_or1_or = v_POLY_isInfOrNan1_out || v_POLY_compare1_val;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/multAdd1\n\tfloat v_POLY_multAdd1_val = (0.64*(v_POLY_length2_val + 0.0)) + 1.0;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_random1_rand, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1\n\tvec3 v_POLY_ifThen1_v = v_POLY_attribute3_val;\n\tif(v_POLY_or1_or){\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\n\t\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\tvec3 v_POLY_ifThen1_attribute4_val = texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\t\n\t\t// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/subnetOutput1\n\t\tv_POLY_ifThen1_v = v_POLY_ifThen1_attribute4_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/floatToVec3_2\n\tvec3 v_POLY_floatToVec3_2_vec3 = vec3(1.0, 1.0, v_POLY_multAdd1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/hsvToRgb1\n\tvec3 v_POLY_hsvToRgb1_rgb = hsv2rgb(v_POLY_floatToVec3_1_vec3);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_ifThen1_v);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingWrite1\n\tvaryingWriteColor = v_POLY_hsvToRgb1_rgb;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/align1\n\tvec4 v_POLY_align1_val = align(v_POLY_normalize1_normalized, vec3(0.0, 1.0, 0.0));\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/twoWaySwitch1\n\tvec4 v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_or1_or){\n\tv_POLY_twoWaySwitch1_val = v_POLY_attribute4_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_align1_val;\n\t}\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/instanceTransform1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_instanceTransform1_position = vec3(position);\n\tv_POLY_instanceTransform1_position *= v_POLY_floatToVec3_2_vec3;\n\tv_POLY_instanceTransform1_position = rotateWithQuat( v_POLY_instanceTransform1_position, v_POLY_twoWaySwitch1_val );\n\tv_POLY_instanceTransform1_position += texture2D( texture_instancePosition, particles_sim_uv_varying ).xyz;\n\tvec3 v_POLY_instanceTransform1_normal = vec3(normal);\n\tv_POLY_instanceTransform1_normal = rotateWithQuat( v_POLY_instanceTransform1_normal, v_POLY_twoWaySwitch1_val );\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tvec3 transformed = v_POLY_instanceTransform1_position;\n\tvec3 objectNormal = v_POLY_instanceTransform1_normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n\n\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\nuniform sampler2D texture_velocity;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/ifThen1/attribute4\nuniform sampler2D texture_instancePosition;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/attribute3\nvarying vec2 particles_sim_uv_varying;\n\n// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\nvarying vec3 varyingWriteColor;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\n\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/varyingRead1\n\tvec3 v_POLY_varyingRead1_fragment = varyingWriteColor;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/attribute2\n\tvec3 v_POLY_attribute2_val = texture2D( texture_velocity, particles_sim_uv_varying ).xyz;\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/length1\n\tfloat v_POLY_length1_val = length(v_POLY_attribute2_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/smoothstep1\n\tfloat v_POLY_smoothstep1_val = smoothstep(0.0, 0.4, v_POLY_length1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/mix1\n\tvec3 v_POLY_mix1_mix = mix(v_POLY_constant1_val, v_POLY_varyingRead1_fragment, v_POLY_smoothstep1_val);\n\t\n\t// /particles/MAT/meshBasicBuilder_PARTICLES/output1\n\tdiffuseColor.xyz = v_POLY_mix1_mix;\n\n\n\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": []
				}
			}
		}
	}
}