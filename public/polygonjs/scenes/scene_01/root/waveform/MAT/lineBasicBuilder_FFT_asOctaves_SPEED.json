{
	"type": "lineBasicBuilder",
	"nodes": {
		"attribute1": {
			"type": "attribute",
			"params": {
				"name": "pti"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"compare1": {
			"type": "compare",
			"params": {
				"test": 2,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.01
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec4ToFloat1",
					"output": "x"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"floatToVec2_1": {
			"type": "floatToVec2",
			"params": {
				"x": {
					"overriden_options": {}
				},
				"y": {
					"raw_input": 0.76,
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute1",
					"output": "val"
				}
			]
		},
		"floatToVec3_1": {
			"type": "floatToVec3",
			"params": {
				"x": {
					"overriden_options": {}
				},
				"y": {
					"overriden_options": {}
				},
				"z": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec3ToFloat1",
					"output": "x"
				},
				{
					"index": 1,
					"node": "add1",
					"output": "sum"
				},
				{
					"index": 2,
					"node": "vec3ToFloat1",
					"output": "z"
				}
			]
		},
		"globals1": {
			"type": "globals"
		},
		"mult1": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"mult1": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 10
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "twoWaySwitch1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "float"
					}
				]
			}
		},
		"output1": {
			"type": "output",
			"inputs": [
				{
					"index": 0,
					"node": "floatToVec3_1",
					"output": "vec3"
				},
				{
					"index": 1,
					"node": "constant1",
					"output": "val"
				}
			]
		},
		"texture1": {
			"type": "texture",
			"params": {
				"uv": {
					"overriden_options": {}
				},
				"blurPixelsCountX": {
					"overriden_options": {}
				},
				"blurPixelsCountY": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "floatToVec2_1",
					"output": "vec2"
				}
			]
		},
		"twoWaySwitch1": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					},
					"raw_input": 1
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "vec4ToFloat1",
					"output": "x"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "float"
					},
					{
						"name": "ifFalse",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"vec3ToFloat1": {
			"type": "vec3ToFloat",
			"params": {
				"vec": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals1",
					"output": "position"
				}
			]
		},
		"vec4ToFloat1": {
			"type": "vec4ToFloat",
			"params": {
				"vec": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "texture1",
					"output": "rgba"
				}
			]
		},
		"constant1": {
			"type": "constant",
			"params": {
				"type": 4,
				"color": [
					0.5490196078431373,
					0,
					0.6196078431372549
				],
				"asColor": true
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"add1": {
			"type": "add",
			"params": {
				"add0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"add1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"add2": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					}
				}
			},
			"maxInputsCount": 3,
			"inputs": [
				{
					"index": 0,
					"node": "vec3ToFloat1",
					"output": "y"
				},
				{
					"index": 1,
					"node": "mult1",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "add0",
						"type": "float"
					},
					{
						"name": "add1",
						"type": "float"
					},
					{
						"name": "add2",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "sum",
						"type": "float"
					}
				]
			}
		}
	},
	"params": {
		"texture1": {
			"type": "node_path",
			"default_value": "",
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false,
				"dependentOnFoundNode": true,
				"nodeSelection": {
					"context": "cop"
				}
			},
			"raw_input": "../../../positionalAudio1/COP/audioAnalyser_FFT_asOctaves",
			"overriden_options": {
				"callback": "{}",
				"nodeSelection": "{\"context\":\"cop\"}"
			}
		}
	},
	"selection": [
		"constant1"
	],
	"persisted_config": {
		"material": {
			"metadata": {
				"version": 4.5,
				"type": "Material",
				"generator": "Material.toJSON"
			},
			"uuid": "/waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED-main",
			"type": "LineBasicMaterial",
			"name": "/waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED",
			"color": 16777215,
			"depthFunc": 3,
			"depthTest": true,
			"depthWrite": true,
			"colorWrite": true,
			"stencilWrite": false,
			"stencilWriteMask": 255,
			"stencilFunc": 519,
			"stencilRef": 0,
			"stencilFuncMask": 255,
			"stencilFail": 7680,
			"stencilZFail": 7680,
			"stencilZPass": 7680
		},
		"onBeforeCompileDataJSON": {
			"vertexShader": "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n\n\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\nvarying vec3 v_POLY_globals1_position;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\nattribute float pti;\n\n\n\n\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\n\tv_POLY_globals1_position = vec3(position);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec3ToFloat1\n\tfloat v_POLY_vec3ToFloat1_x = v_POLY_globals1_position.x;\n\tfloat v_POLY_vec3ToFloat1_z = v_POLY_globals1_position.z;\n\tfloat v_POLY_vec3ToFloat1_y = v_POLY_globals1_position.y;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.76);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_floatToVec2_1_vec2);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_x = v_POLY_texture1_rgba.x;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/compare1\n\tbool v_POLY_compare1_val = (v_POLY_vec4ToFloat1_x > 0.01);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_vec4ToFloat1_x;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = 0.0;\n\t}\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_twoWaySwitch1_val * 10.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/add1\n\tfloat v_POLY_add1_sum = (v_POLY_vec3ToFloat1_y + v_POLY_mult1_product + 0.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_vec3ToFloat1_x, v_POLY_add1_sum, v_POLY_vec3ToFloat1_z);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tvec3 transformed = v_POLY_floatToVec3_1_vec3;vec4 mvPosition = vec4( transformed, 1.0 ); gl_Position = projectionMatrix * modelViewMatrix * mvPosition;\n\n\n\n\t#include <morphcolor_vertex>\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n// removed:\n//\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",
			"fragmentShader": "\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/constant1\n\tvec3 v_POLY_constant1_val = vec3(0.5490196078431373, 0.0, 0.6196078431372549);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tdiffuseColor.xyz = v_POLY_constant1_val;\n\n\n\n\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",
			"timeDependent": false,
			"resolutionDependent": false,
			"paramConfigs": [
				{
					"type": "node_path",
					"name": "texture1",
					"defaultValue": "",
					"uniformName": "v_POLY_texture_texture1"
				}
			]
		},
		"customMaterials": {
			"customDistanceMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED-customDistanceMaterial",
					"type": "ShaderMaterial",
					"name": "customDistanceMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"glslVersion": null,
					"uniforms": {
						"diffuse": {
							"type": "c",
							"value": 16777215
						},
						"opacity": {
							"value": 1
						},
						"map": {
							"value": null
						},
						"uvTransform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"uv2Transform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"alphaMap": {
							"value": null
						},
						"alphaTest": {
							"value": 0
						},
						"displacementMap": {
							"value": null
						},
						"displacementScale": {
							"value": 1
						},
						"displacementBias": {
							"value": 0
						},
						"referencePosition": {
							"type": "v3",
							"value": [
								0,
								0,
								0
							]
						},
						"nearDistance": {
							"value": 1
						},
						"farDistance": {
							"value": 1000
						}
					},
					"defines": {
						"USE_SIZEATTENUATION": 1,
						"DEPTH_PACKING": 3201
					},
					"vertexShader": "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// INSERT DEFINES\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\n\tvHighPrecisionZW = gl_Position.zw;\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
					"lights": false
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// INSERT DEFINES\n\n\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\nvarying vec3 v_POLY_globals1_position;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\nattribute float pti;\n\n\n\n\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\n\tv_POLY_globals1_position = vec3(position);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec3ToFloat1\n\tfloat v_POLY_vec3ToFloat1_x = v_POLY_globals1_position.x;\n\tfloat v_POLY_vec3ToFloat1_z = v_POLY_globals1_position.z;\n\tfloat v_POLY_vec3ToFloat1_y = v_POLY_globals1_position.y;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.76);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_floatToVec2_1_vec2);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_x = v_POLY_texture1_rgba.x;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/compare1\n\tbool v_POLY_compare1_val = (v_POLY_vec4ToFloat1_x > 0.01);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_vec4ToFloat1_x;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = 0.0;\n\t}\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_twoWaySwitch1_val * 10.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/add1\n\tfloat v_POLY_add1_sum = (v_POLY_vec3ToFloat1_y + v_POLY_mult1_product + 0.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_vec3ToFloat1_x, v_POLY_add1_sum, v_POLY_vec3ToFloat1_z);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tvec3 transformed = v_POLY_floatToVec3_1_vec3;vec4 mvPosition = vec4( transformed, 1.0 ); gl_Position = projectionMatrix * modelViewMatrix * mvPosition;\n\n\n\n\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n// removed:\n//\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\n\tvHighPrecisionZW = gl_Position.zw;\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/constant1\n\tvec3 v_POLY_constant1_val = vec3(0.5490196078431373, 0.0, 0.6196078431372549);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tdiffuseColor.xyz = v_POLY_constant1_val;\n\n\n\n\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": [
						{
							"type": "node_path",
							"name": "texture1",
							"defaultValue": "",
							"uniformName": "v_POLY_texture_texture1"
						}
					]
				}
			},
			"customDepthMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED-customDepthMaterial",
					"type": "ShaderMaterial",
					"name": "customDepthMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"glslVersion": null,
					"uniforms": {
						"diffuse": {
							"type": "c",
							"value": 16777215
						},
						"opacity": {
							"value": 1
						},
						"map": {
							"value": null
						},
						"uvTransform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"uv2Transform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"alphaMap": {
							"value": null
						},
						"alphaTest": {
							"value": 0
						},
						"displacementMap": {
							"value": null
						},
						"displacementScale": {
							"value": 1
						},
						"displacementBias": {
							"value": 0
						}
					},
					"defines": {
						"DEPTH_PACKING": 3201
					},
					"vertexShader": "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// INSERT DEFINES\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\n\tvHighPrecisionZW = gl_Position.zw;\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"lights": false
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// INSERT DEFINES\n\n\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\nvarying vec3 v_POLY_globals1_position;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\nattribute float pti;\n\n\n\n\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\n\tv_POLY_globals1_position = vec3(position);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec3ToFloat1\n\tfloat v_POLY_vec3ToFloat1_x = v_POLY_globals1_position.x;\n\tfloat v_POLY_vec3ToFloat1_z = v_POLY_globals1_position.z;\n\tfloat v_POLY_vec3ToFloat1_y = v_POLY_globals1_position.y;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.76);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_floatToVec2_1_vec2);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_x = v_POLY_texture1_rgba.x;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/compare1\n\tbool v_POLY_compare1_val = (v_POLY_vec4ToFloat1_x > 0.01);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_vec4ToFloat1_x;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = 0.0;\n\t}\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_twoWaySwitch1_val * 10.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/add1\n\tfloat v_POLY_add1_sum = (v_POLY_vec3ToFloat1_y + v_POLY_mult1_product + 0.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_vec3ToFloat1_x, v_POLY_add1_sum, v_POLY_vec3ToFloat1_z);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tvec3 transformed = v_POLY_floatToVec3_1_vec3;vec4 mvPosition = vec4( transformed, 1.0 ); gl_Position = projectionMatrix * modelViewMatrix * mvPosition;\n\n\n\n\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n// removed:\n//\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\n\tvHighPrecisionZW = gl_Position.zw;\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/constant1\n\tvec3 v_POLY_constant1_val = vec3(0.5490196078431373, 0.0, 0.6196078431372549);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tdiffuseColor.xyz = v_POLY_constant1_val;\n\n\n\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": [
						{
							"type": "node_path",
							"name": "texture1",
							"defaultValue": "",
							"uniformName": "v_POLY_texture_texture1"
						}
					]
				}
			},
			"customDepthDOFMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED-customDepthDOFMaterial",
					"type": "ShaderMaterial",
					"name": "customDepthDOFMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"glslVersion": null,
					"uniforms": {
						"diffuse": {
							"type": "c",
							"value": 16777215
						},
						"opacity": {
							"value": 1
						},
						"map": {
							"value": null
						},
						"uvTransform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"uv2Transform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"alphaMap": {
							"value": null
						},
						"alphaTest": {
							"value": 0
						},
						"displacementMap": {
							"value": null
						},
						"displacementScale": {
							"value": 1
						},
						"displacementBias": {
							"value": 0
						}
					},
					"defines": {
						"DEPTH_PACKING": 3200
					},
					"vertexShader": "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// INSERT DEFINES\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\n\tvHighPrecisionZW = gl_Position.zw;\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"lights": false
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// INSERT DEFINES\n\n\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\nvarying vec3 v_POLY_globals1_position;\n\n// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\nattribute float pti;\n\n\n\n\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/globals1\n\tv_POLY_globals1_position = vec3(position);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/attribute1\n\tfloat v_POLY_attribute1_val = pti;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec3ToFloat1\n\tfloat v_POLY_vec3ToFloat1_x = v_POLY_globals1_position.x;\n\tfloat v_POLY_vec3ToFloat1_z = v_POLY_globals1_position.z;\n\tfloat v_POLY_vec3ToFloat1_y = v_POLY_globals1_position.y;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec2_1\n\tvec2 v_POLY_floatToVec2_1_vec2 = vec2(v_POLY_attribute1_val, 0.76);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_floatToVec2_1_vec2);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_x = v_POLY_texture1_rgba.x;\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/compare1\n\tbool v_POLY_compare1_val = (v_POLY_vec4ToFloat1_x > 0.01);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_vec4ToFloat1_x;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = 0.0;\n\t}\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_twoWaySwitch1_val * 10.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/add1\n\tfloat v_POLY_add1_sum = (v_POLY_vec3ToFloat1_y + v_POLY_mult1_product + 0.0);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_vec3ToFloat1_x, v_POLY_add1_sum, v_POLY_vec3ToFloat1_z);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tvec3 transformed = v_POLY_floatToVec3_1_vec3;vec4 mvPosition = vec4( transformed, 1.0 ); gl_Position = projectionMatrix * modelViewMatrix * mvPosition;\n\n\n\n\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n// removed:\n//\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\n\tvHighPrecisionZW = gl_Position.zw;\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\n\n\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/constant1\n\tvec3 v_POLY_constant1_val = vec3(0.5490196078431373, 0.0, 0.6196078431372549);\n\t\n\t// /waveform/MAT/lineBasicBuilder_FFT_asOctaves_SPEED/output1\n\tdiffuseColor.xyz = v_POLY_constant1_val;\n\n\n\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": [
						{
							"type": "node_path",
							"name": "texture1",
							"defaultValue": "",
							"uniformName": "v_POLY_texture_texture1"
						}
					]
				}
			}
		}
	}
}